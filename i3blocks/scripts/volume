#!/usr/bin/env python3

import sys
import subprocess
import json

# case $BLOCK_BUTTON in
#     3) amixer -q -D pulse set Master Playback Switch toggle ;;  # Toggle mute
#     4) amixer -q -D pulse set Master 5%+ unmute ;; # Increase volume
#     5) amixer -q -D pulse set Master 5%- unmute ;; # Decrease volume
# esac

# # Print current volume
# if [ -f amixer -D pulse get Master | grep -o "\[on\]" | head -n1 ]
#     amixer -D pulse get Master | grep -o "\[.*%\]" | grep -o "[0-9]*" | head -n1
# fi

def is_muted():
    return not subprocess.check_output(
        'amixer -D pulse get Master | grep -o "\[on\]" | head -n1',
        shell=True,
        universal_newlines=True,
    )

def get_volume():
    return int(subprocess.check_output(
        'amixer -D pulse get Master | grep -o "\[.*%\]" | grep -o "[0-9]*" | head -n1',
        shell=True,
        universal_newlines=True,
    ).split()[0])

def toggle_muted():
    subprocess.check_output(
        'amixer -q -D pulse set Master Playback Switch toggle',
        shell=True,
    )

def increase_volume():
    subprocess.check_output(
        'amixer -q -D pulse set Master 5%+ unmute',
        shell=True,
    )

def decrease_volume():
    subprocess.check_output(
        'amixer -q -D pulse set Master 5%- unmute',
        shell=True,
    )

def emit_signal():
    executor.run('pkill -RTMIN+10 i3blocks')

def get_command():
    if len(sys.argv) > 1:
        return sys.argv[1]
    return None

def main():
    # Execute command if given
    try:
        command = get_command()
        if command is not None:
            if command == '3':
                # Toggle mute
                toggle_muted()
            elif command == '4':
                # Increase volume
                increase_volume()
            elif command == '5':
                # Decrease volume
                decrease_volume()
    except Exception as e:
        pass

    def render_bar(value, min_value, max_value, bar_length=10):
        full_block_char = u"\u2588"
        part_block_chars = [
            (7.0 / 8.0, u"\u2589"),
            (6.0 / 8.0, u"\u258A"),
            (5.0 / 8.0, u"\u258B"),
            (4.0 / 8.0, u"\u258C"),
            (3.0 / 8.0, u"\u258D"),
            (2.0 / 8.0, u"\u258E"),
            (1.0 / 8.0, u"\u258F"),
            (0, ""),
        ]
        fill_char = u"\u2015"
        # fill_char = " "

        clamped = min(max(value, min_value), max_value)
        scaled = clamped / float(max_value) * bar_length

        full_blocks = int(scaled)
        part_blocks = scaled - int(scaled)

        bar = (
            # Number of full blocks
            full_block_char*int(full_blocks) +

            # First possible partial block
            next((x for x in part_block_chars if part_blocks >= x[0]))[1]
        ).ljust(
            # Fill rest of length with filler characters
            bar_length, fill_char
        )
        return bar


    # Write current volume level
    try:
        vol = get_volume()
        bar = render_bar(vol, 0, 100, 5)

        if not is_muted():
            sys.stdout.write(
                json.dumps(
                    {
                        "full_text": u"\ufa7d {bar} {vol:3}%".format(
                            bar=bar,
                            vol=get_volume()
                        ),
                    },
                    ensure_ascii=False,
                )+"\n"
            )
            sys.stdout.flush()
        else:
            sys.stdout.write(
                json.dumps(
                    {
                        "full_text": u"\ufa80 {bar} MUTE".format(
                            bar=bar,
                        ),
                        "color": "#686868",
                    },
                    ensure_ascii=False,
                )+"\n"
            )
            sys.stdout.flush()
    except Exception as e:
        sys.stdout.write(f"ERROR: {e}")
        sys.stdout.flush()
    return 0

if __name__ == '__main__':
    main()
